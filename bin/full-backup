#!/usr/bin/env python3
#
# Full backup of several paths to an external drive
#

import subprocess
from collections.abc import Iterable
from pathlib import Path
from shutil import which


def backup_dirs(origs: Iterable[Path], dest: Path) -> None:
    if which("rsync") is None:
        print("rsync not found in PATH")
        return

    sources_paths: list[str] = []
    dest_path = dest.expanduser().resolve(strict=True).as_posix() + "/"

    for orig in origs:
        src = Path(orig).expanduser().resolve(strict=True)

        if src.is_dir():
            sources_paths.append(src.as_posix() + "/")
        else:
            sources_paths.append(src.as_posix())

    print(f"Backing up {sources_paths} → {dest_path}")

    subprocess.run(
        [
            "rsync",
            "--compress",
            "--copy-links",
            "--delete",
            "--delete-excluded",
            "--exclude=.DS_Store",
            "--exclude=.Trash",
            "--itemize-changes",
            "--links",
            "--modify-window=2",
            "--numeric-ids",
            "--omit-dir-times",
            "--recursive",
            "--times",
            *sources_paths,
            dest_path,
        ],
        check=True,
    )


def backup_photos(photos_library: Path, dest: Path) -> None:
    photos_db = photos_library.expanduser().resolve(strict=True)
    export_dir = dest.expanduser().resolve(strict=True)

    print(f"Backing up Photos DB {photos_db} → {export_dir}")

    cmd = [
        "uvx",
        "osxphotos",
        "export",
        export_dir.as_posix() + "/",
        "--cleanup",
        "--convert-to-jpeg",
        "--jpeg-quality",
        "0.9",
        "--db",
        photos_db.as_posix() + "/",
        "--directory",
        "{folder_album}",
        "--download-missing",
        "--edited-suffix",
        "",
        "--exiftool",
        "--exiftool-merge-keywords",
        "--exiftool-merge-persons",
        "--filename",
        "{created.strftime,%Y-%m-%d-%H%M%S}",
        "--ignore-date-modified",
        "--jpeg-ext",
        "jpg",
        "--not-hidden",
        "--retry",
        "5",
        "--person-keyword",
        "--skip-bursts",
        "--skip-live",
        "--skip-original-if-edited",
        "--skip-raw",
        "--theme",
        "dark",
        "--update",
    ]

    subprocess.run(cmd, check=True)


if __name__ == "__main__":
    # Hidden files in repos
    backup_dirs(
        [
            Path("~/.config/dotfiles/git/git.configsymlink/config-local"),
            Path("~/.config/dotfiles/git/git.configsymlink/allowed-signers"),
        ],
        Path("/Volumes/Backups/Ignored/git/"),
    )

    backup_dirs(
        [
            Path("~/Developer/personal/homelab/ansible/hosts.ini"),
            Path("~/Developer/personal/homelab/ansible/vars.yaml"),
            Path("~/Developer/personal/homelab/kubernetes/.env"),
        ],
        Path("/Volumes/Backups/Ignored/homelab/"),
    )

    # iCloud Drive
    backup_dirs(
        [Path("~/Library/Mobile Documents/com~apple~CloudDocs/")],
        Path("/Volumes/Backups/Drive/"),
    )

    # Obsidian
    backup_dirs(
        [Path("~/Library/Mobile Documents/iCloud~md~obsidian")],
        Path("/Volumes/Backups/Obsidian/"),
    )

    # Apple Photos
    backup_photos(
        Path("~/Pictures/Photos Library.photoslibrary"),
        Path("/Volumes/Backups/Photos/"),
    )

# vim: set syntax=python:
